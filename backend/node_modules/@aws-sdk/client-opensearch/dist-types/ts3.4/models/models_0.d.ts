import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { OpenSearchServiceException as __BaseException } from "./OpenSearchServiceException";
export interface AcceptInboundConnectionRequest {
  ConnectionId: string | undefined;
}
export declare const ConnectionMode: {
  readonly DIRECT: "DIRECT";
  readonly VPC_ENDPOINT: "VPC_ENDPOINT";
};
export type ConnectionMode =
  (typeof ConnectionMode)[keyof typeof ConnectionMode];
export declare const InboundConnectionStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly APPROVED: "APPROVED";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly PENDING_ACCEPTANCE: "PENDING_ACCEPTANCE";
  readonly PROVISIONING: "PROVISIONING";
  readonly REJECTED: "REJECTED";
  readonly REJECTING: "REJECTING";
};
export type InboundConnectionStatusCode =
  (typeof InboundConnectionStatusCode)[keyof typeof InboundConnectionStatusCode];
export interface InboundConnectionStatus {
  StatusCode?: InboundConnectionStatusCode | undefined;
  Message?: string | undefined;
}
export interface AWSDomainInformation {
  OwnerId?: string | undefined;
  DomainName: string | undefined;
  Region?: string | undefined;
}
export interface DomainInformationContainer {
  AWSDomainInformation?: AWSDomainInformation | undefined;
}
export interface InboundConnection {
  LocalDomainInfo?: DomainInformationContainer | undefined;
  RemoteDomainInfo?: DomainInformationContainer | undefined;
  ConnectionId?: string | undefined;
  ConnectionStatus?: InboundConnectionStatus | undefined;
  ConnectionMode?: ConnectionMode | undefined;
}
export interface AcceptInboundConnectionResponse {
  Connection?: InboundConnection | undefined;
}
export declare class DisabledOperationException extends __BaseException {
  readonly name: "DisabledOperationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DisabledOperationException, __BaseException>
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare const OptionState: {
  readonly Active: "Active";
  readonly Processing: "Processing";
  readonly RequiresIndexDocuments: "RequiresIndexDocuments";
};
export type OptionState = (typeof OptionState)[keyof typeof OptionState];
export interface OptionStatus {
  CreationDate: Date | undefined;
  UpdateDate: Date | undefined;
  UpdateVersion?: number | undefined;
  State: OptionState | undefined;
  PendingDeletion?: boolean | undefined;
}
export interface AccessPoliciesStatus {
  Options: string | undefined;
  Status: OptionStatus | undefined;
}
export declare const ActionSeverity: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type ActionSeverity =
  (typeof ActionSeverity)[keyof typeof ActionSeverity];
export declare const ActionStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly ELIGIBLE: "ELIGIBLE";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_ELIGIBLE: "NOT_ELIGIBLE";
  readonly PENDING_UPDATE: "PENDING_UPDATE";
};
export type ActionStatus = (typeof ActionStatus)[keyof typeof ActionStatus];
export declare const ActionType: {
  readonly JVM_HEAP_SIZE_TUNING: "JVM_HEAP_SIZE_TUNING";
  readonly JVM_YOUNG_GEN_TUNING: "JVM_YOUNG_GEN_TUNING";
  readonly SERVICE_SOFTWARE_UPDATE: "SERVICE_SOFTWARE_UPDATE";
};
export type ActionType = (typeof ActionType)[keyof typeof ActionType];
export interface S3GlueDataCatalog {
  RoleArn?: string | undefined;
}
export type DataSourceType =
  | DataSourceType.S3GlueDataCatalogMember
  | DataSourceType.$UnknownMember;
export declare namespace DataSourceType {
  interface S3GlueDataCatalogMember {
    S3GlueDataCatalog: S3GlueDataCatalog;
    $unknown?: never;
  }
  interface $UnknownMember {
    S3GlueDataCatalog?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    S3GlueDataCatalog: (value: S3GlueDataCatalog) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: DataSourceType, visitor: Visitor<T>) => T;
}
export interface AddDataSourceRequest {
  DomainName: string | undefined;
  Name: string | undefined;
  DataSourceType: DataSourceType | undefined;
  Description?: string | undefined;
}
export interface AddDataSourceResponse {
  Message?: string | undefined;
}
export declare class BaseException extends __BaseException {
  readonly name: "BaseException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<BaseException, __BaseException>);
}
export declare class DependencyFailureException extends __BaseException {
  readonly name: "DependencyFailureException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<DependencyFailureException, __BaseException>
  );
}
export declare class InternalException extends __BaseException {
  readonly name: "InternalException";
  readonly $fault: "server";
  constructor(opts: __ExceptionOptionType<InternalException, __BaseException>);
}
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface CloudWatchDirectQueryDataSource {
  RoleArn: string | undefined;
}
export interface SecurityLakeDirectQueryDataSource {
  RoleArn: string | undefined;
}
export type DirectQueryDataSourceType =
  | DirectQueryDataSourceType.CloudWatchLogMember
  | DirectQueryDataSourceType.SecurityLakeMember
  | DirectQueryDataSourceType.$UnknownMember;
export declare namespace DirectQueryDataSourceType {
  interface CloudWatchLogMember {
    CloudWatchLog: CloudWatchDirectQueryDataSource;
    SecurityLake?: never;
    $unknown?: never;
  }
  interface SecurityLakeMember {
    CloudWatchLog?: never;
    SecurityLake: SecurityLakeDirectQueryDataSource;
    $unknown?: never;
  }
  interface $UnknownMember {
    CloudWatchLog?: never;
    SecurityLake?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    CloudWatchLog: (value: CloudWatchDirectQueryDataSource) => T;
    SecurityLake: (value: SecurityLakeDirectQueryDataSource) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: DirectQueryDataSourceType, visitor: Visitor<T>) => T;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface AddDirectQueryDataSourceRequest {
  DataSourceName: string | undefined;
  DataSourceType: DirectQueryDataSourceType | undefined;
  Description?: string | undefined;
  OpenSearchArns: string[] | undefined;
  TagList?: Tag[] | undefined;
}
export interface AddDirectQueryDataSourceResponse {
  DataSourceArn?: string | undefined;
}
export interface AdditionalLimit {
  LimitName?: string | undefined;
  LimitValues?: string[] | undefined;
}
export interface AddTagsRequest {
  ARN: string | undefined;
  TagList: Tag[] | undefined;
}
export interface AdvancedOptionsStatus {
  Options: Record<string, string> | undefined;
  Status: OptionStatus | undefined;
}
export interface IAMFederationOptionsOutput {
  Enabled?: boolean | undefined;
  SubjectKey?: string | undefined;
  RolesKey?: string | undefined;
}
export interface JWTOptionsOutput {
  Enabled?: boolean | undefined;
  SubjectKey?: string | undefined;
  RolesKey?: string | undefined;
  PublicKey?: string | undefined;
}
export interface SAMLIdp {
  MetadataContent: string | undefined;
  EntityId: string | undefined;
}
export interface SAMLOptionsOutput {
  Enabled?: boolean | undefined;
  Idp?: SAMLIdp | undefined;
  SubjectKey?: string | undefined;
  RolesKey?: string | undefined;
  SessionTimeoutMinutes?: number | undefined;
}
export interface AdvancedSecurityOptions {
  Enabled?: boolean | undefined;
  InternalUserDatabaseEnabled?: boolean | undefined;
  SAMLOptions?: SAMLOptionsOutput | undefined;
  JWTOptions?: JWTOptionsOutput | undefined;
  IAMFederationOptions?: IAMFederationOptionsOutput | undefined;
  AnonymousAuthDisableDate?: Date | undefined;
  AnonymousAuthEnabled?: boolean | undefined;
}
export interface IAMFederationOptionsInput {
  Enabled?: boolean | undefined;
  SubjectKey?: string | undefined;
  RolesKey?: string | undefined;
}
export interface JWTOptionsInput {
  Enabled?: boolean | undefined;
  SubjectKey?: string | undefined;
  RolesKey?: string | undefined;
  PublicKey?: string | undefined;
}
export interface MasterUserOptions {
  MasterUserARN?: string | undefined;
  MasterUserName?: string | undefined;
  MasterUserPassword?: string | undefined;
}
export interface SAMLOptionsInput {
  Enabled?: boolean | undefined;
  Idp?: SAMLIdp | undefined;
  MasterUserName?: string | undefined;
  MasterBackendRole?: string | undefined;
  SubjectKey?: string | undefined;
  RolesKey?: string | undefined;
  SessionTimeoutMinutes?: number | undefined;
}
export interface AdvancedSecurityOptionsInput {
  Enabled?: boolean | undefined;
  InternalUserDatabaseEnabled?: boolean | undefined;
  MasterUserOptions?: MasterUserOptions | undefined;
  SAMLOptions?: SAMLOptionsInput | undefined;
  JWTOptions?: JWTOptionsInput | undefined;
  IAMFederationOptions?: IAMFederationOptionsInput | undefined;
  AnonymousAuthEnabled?: boolean | undefined;
}
export interface AdvancedSecurityOptionsStatus {
  Options: AdvancedSecurityOptions | undefined;
  Status: OptionStatus | undefined;
}
export declare const NaturalLanguageQueryGenerationDesiredState: {
  readonly Disabled: "DISABLED";
  readonly Enabled: "ENABLED";
};
export type NaturalLanguageQueryGenerationDesiredState =
  (typeof NaturalLanguageQueryGenerationDesiredState)[keyof typeof NaturalLanguageQueryGenerationDesiredState];
export interface NaturalLanguageQueryGenerationOptionsInput {
  DesiredState?: NaturalLanguageQueryGenerationDesiredState | undefined;
}
export interface S3VectorsEngine {
  Enabled?: boolean | undefined;
}
export interface AIMLOptionsInput {
  NaturalLanguageQueryGenerationOptions?:
    | NaturalLanguageQueryGenerationOptionsInput
    | undefined;
  S3VectorsEngine?: S3VectorsEngine | undefined;
}
export declare const NaturalLanguageQueryGenerationCurrentState: {
  readonly DisableComplete: "DISABLE_COMPLETE";
  readonly DisableFailed: "DISABLE_FAILED";
  readonly DisableInProgress: "DISABLE_IN_PROGRESS";
  readonly EnableComplete: "ENABLE_COMPLETE";
  readonly EnableFailed: "ENABLE_FAILED";
  readonly EnableInProgress: "ENABLE_IN_PROGRESS";
  readonly NotEnabled: "NOT_ENABLED";
};
export type NaturalLanguageQueryGenerationCurrentState =
  (typeof NaturalLanguageQueryGenerationCurrentState)[keyof typeof NaturalLanguageQueryGenerationCurrentState];
export interface NaturalLanguageQueryGenerationOptionsOutput {
  DesiredState?: NaturalLanguageQueryGenerationDesiredState | undefined;
  CurrentState?: NaturalLanguageQueryGenerationCurrentState | undefined;
}
export interface AIMLOptionsOutput {
  NaturalLanguageQueryGenerationOptions?:
    | NaturalLanguageQueryGenerationOptionsOutput
    | undefined;
  S3VectorsEngine?: S3VectorsEngine | undefined;
}
export interface AIMLOptionsStatus {
  Options?: AIMLOptionsOutput | undefined;
  Status?: OptionStatus | undefined;
}
export interface KeyStoreAccessOption {
  KeyAccessRoleArn?: string | undefined;
  KeyStoreAccessEnabled: boolean | undefined;
}
export interface PackageAssociationConfiguration {
  KeyStoreAccessOption?: KeyStoreAccessOption | undefined;
}
export interface AssociatePackageRequest {
  PackageID: string | undefined;
  DomainName: string | undefined;
  PrerequisitePackageIDList?: string[] | undefined;
  AssociationConfiguration?: PackageAssociationConfiguration | undefined;
}
export declare const DomainPackageStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly ASSOCIATING: "ASSOCIATING";
  readonly ASSOCIATION_FAILED: "ASSOCIATION_FAILED";
  readonly DISSOCIATING: "DISSOCIATING";
  readonly DISSOCIATION_FAILED: "DISSOCIATION_FAILED";
};
export type DomainPackageStatus =
  (typeof DomainPackageStatus)[keyof typeof DomainPackageStatus];
export interface ErrorDetails {
  ErrorType?: string | undefined;
  ErrorMessage?: string | undefined;
}
export declare const PackageType: {
  readonly PACKAGE_CONFIG: "PACKAGE-CONFIG";
  readonly PACKAGE_LICENSE: "PACKAGE-LICENSE";
  readonly TXT_DICTIONARY: "TXT-DICTIONARY";
  readonly ZIP_PLUGIN: "ZIP-PLUGIN";
};
export type PackageType = (typeof PackageType)[keyof typeof PackageType];
export interface DomainPackageDetails {
  PackageID?: string | undefined;
  PackageName?: string | undefined;
  PackageType?: PackageType | undefined;
  LastUpdated?: Date | undefined;
  DomainName?: string | undefined;
  DomainPackageStatus?: DomainPackageStatus | undefined;
  PackageVersion?: string | undefined;
  PrerequisitePackageIDList?: string[] | undefined;
  ReferencePath?: string | undefined;
  ErrorDetails?: ErrorDetails | undefined;
  AssociationConfiguration?: PackageAssociationConfiguration | undefined;
}
export interface AssociatePackageResponse {
  DomainPackageDetails?: DomainPackageDetails | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface PackageDetailsForAssociation {
  PackageID: string | undefined;
  PrerequisitePackageIDList?: string[] | undefined;
  AssociationConfiguration?: PackageAssociationConfiguration | undefined;
}
export interface AssociatePackagesRequest {
  PackageList: PackageDetailsForAssociation[] | undefined;
  DomainName: string | undefined;
}
export interface AssociatePackagesResponse {
  DomainPackageDetailsList?: DomainPackageDetails[] | undefined;
}
export declare const AWSServicePrincipal: {
  readonly application_opensearchservice_amazonaws_com: "application.opensearchservice.amazonaws.com";
};
export type AWSServicePrincipal =
  (typeof AWSServicePrincipal)[keyof typeof AWSServicePrincipal];
export interface AuthorizeVpcEndpointAccessRequest {
  DomainName: string | undefined;
  Account?: string | undefined;
  Service?: AWSServicePrincipal | undefined;
}
export declare const PrincipalType: {
  readonly AWS_ACCOUNT: "AWS_ACCOUNT";
  readonly AWS_SERVICE: "AWS_SERVICE";
};
export type PrincipalType = (typeof PrincipalType)[keyof typeof PrincipalType];
export interface AuthorizedPrincipal {
  PrincipalType?: PrincipalType | undefined;
  Principal?: string | undefined;
}
export interface AuthorizeVpcEndpointAccessResponse {
  AuthorizedPrincipal: AuthorizedPrincipal | undefined;
}
export interface CancelDomainConfigChangeRequest {
  DomainName: string | undefined;
  DryRun?: boolean | undefined;
}
export interface CancelledChangeProperty {
  PropertyName?: string | undefined;
  CancelledValue?: string | undefined;
  ActiveValue?: string | undefined;
}
export interface CancelDomainConfigChangeResponse {
  CancelledChangeIds?: string[] | undefined;
  CancelledChangeProperties?: CancelledChangeProperty[] | undefined;
  DryRun?: boolean | undefined;
}
export interface CancelServiceSoftwareUpdateRequest {
  DomainName: string | undefined;
}
export declare const DeploymentStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly ELIGIBLE: "ELIGIBLE";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly NOT_ELIGIBLE: "NOT_ELIGIBLE";
  readonly PENDING_UPDATE: "PENDING_UPDATE";
};
export type DeploymentStatus =
  (typeof DeploymentStatus)[keyof typeof DeploymentStatus];
export interface ServiceSoftwareOptions {
  CurrentVersion?: string | undefined;
  NewVersion?: string | undefined;
  UpdateAvailable?: boolean | undefined;
  Cancellable?: boolean | undefined;
  UpdateStatus?: DeploymentStatus | undefined;
  Description?: string | undefined;
  AutomatedUpdateDate?: Date | undefined;
  OptionalDeployment?: boolean | undefined;
}
export interface CancelServiceSoftwareUpdateResponse {
  ServiceSoftwareOptions?: ServiceSoftwareOptions | undefined;
}
export declare const AppConfigType: {
  readonly OpensearchDashboardAdminGroups: "opensearchDashboards.dashboardAdmin.groups";
  readonly OpensearchDashboardAdminUsers: "opensearchDashboards.dashboardAdmin.users";
};
export type AppConfigType = (typeof AppConfigType)[keyof typeof AppConfigType];
export interface AppConfig {
  key?: AppConfigType | undefined;
  value?: string | undefined;
}
export interface DataSource {
  dataSourceArn?: string | undefined;
  dataSourceDescription?: string | undefined;
}
export interface IamIdentityCenterOptionsInput {
  enabled?: boolean | undefined;
  iamIdentityCenterInstanceArn?: string | undefined;
  iamRoleForIdentityCenterApplicationArn?: string | undefined;
}
export interface CreateApplicationRequest {
  clientToken?: string | undefined;
  name: string | undefined;
  dataSources?: DataSource[] | undefined;
  iamIdentityCenterOptions?: IamIdentityCenterOptionsInput | undefined;
  appConfigs?: AppConfig[] | undefined;
  tagList?: Tag[] | undefined;
}
export interface IamIdentityCenterOptions {
  enabled?: boolean | undefined;
  iamIdentityCenterInstanceArn?: string | undefined;
  iamRoleForIdentityCenterApplicationArn?: string | undefined;
  iamIdentityCenterApplicationArn?: string | undefined;
}
export interface CreateApplicationResponse {
  id?: string | undefined;
  name?: string | undefined;
  arn?: string | undefined;
  dataSources?: DataSource[] | undefined;
  iamIdentityCenterOptions?: IamIdentityCenterOptions | undefined;
  appConfigs?: AppConfig[] | undefined;
  tagList?: Tag[] | undefined;
  createdAt?: Date | undefined;
}
export declare const AutoTuneDesiredState: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AutoTuneDesiredState =
  (typeof AutoTuneDesiredState)[keyof typeof AutoTuneDesiredState];
export declare const TimeUnit: {
  readonly HOURS: "HOURS";
};
export type TimeUnit = (typeof TimeUnit)[keyof typeof TimeUnit];
export interface Duration {
  Value?: number | undefined;
  Unit?: TimeUnit | undefined;
}
export interface AutoTuneMaintenanceSchedule {
  StartAt?: Date | undefined;
  Duration?: Duration | undefined;
  CronExpressionForRecurrence?: string | undefined;
}
export interface AutoTuneOptionsInput {
  DesiredState?: AutoTuneDesiredState | undefined;
  MaintenanceSchedules?: AutoTuneMaintenanceSchedule[] | undefined;
  UseOffPeakWindow?: boolean | undefined;
}
export interface ColdStorageOptions {
  Enabled: boolean | undefined;
}
export declare const OpenSearchPartitionInstanceType: {
  readonly c4_2xlarge_search: "c4.2xlarge.search";
  readonly c4_4xlarge_search: "c4.4xlarge.search";
  readonly c4_8xlarge_search: "c4.8xlarge.search";
  readonly c4_large_search: "c4.large.search";
  readonly c4_xlarge_search: "c4.xlarge.search";
  readonly c5_18xlarge_search: "c5.18xlarge.search";
  readonly c5_2xlarge_search: "c5.2xlarge.search";
  readonly c5_4xlarge_search: "c5.4xlarge.search";
  readonly c5_9xlarge_search: "c5.9xlarge.search";
  readonly c5_large_search: "c5.large.search";
  readonly c5_xlarge_search: "c5.xlarge.search";
  readonly c6g_12xlarge_search: "c6g.12xlarge.search";
  readonly c6g_2xlarge_search: "c6g.2xlarge.search";
  readonly c6g_4xlarge_search: "c6g.4xlarge.search";
  readonly c6g_8xlarge_search: "c6g.8xlarge.search";
  readonly c6g_large_search: "c6g.large.search";
  readonly c6g_xlarge_search: "c6g.xlarge.search";
  readonly d2_2xlarge_search: "d2.2xlarge.search";
  readonly d2_4xlarge_search: "d2.4xlarge.search";
  readonly d2_8xlarge_search: "d2.8xlarge.search";
  readonly d2_xlarge_search: "d2.xlarge.search";
  readonly i2_2xlarge_search: "i2.2xlarge.search";
  readonly i2_xlarge_search: "i2.xlarge.search";
  readonly i3_16xlarge_search: "i3.16xlarge.search";
  readonly i3_2xlarge_search: "i3.2xlarge.search";
  readonly i3_4xlarge_search: "i3.4xlarge.search";
  readonly i3_8xlarge_search: "i3.8xlarge.search";
  readonly i3_large_search: "i3.large.search";
  readonly i3_xlarge_search: "i3.xlarge.search";
  readonly m3_2xlarge_search: "m3.2xlarge.search";
  readonly m3_large_search: "m3.large.search";
  readonly m3_medium_search: "m3.medium.search";
  readonly m3_xlarge_search: "m3.xlarge.search";
  readonly m4_10xlarge_search: "m4.10xlarge.search";
  readonly m4_2xlarge_search: "m4.2xlarge.search";
  readonly m4_4xlarge_search: "m4.4xlarge.search";
  readonly m4_large_search: "m4.large.search";
  readonly m4_xlarge_search: "m4.xlarge.search";
  readonly m5_12xlarge_search: "m5.12xlarge.search";
  readonly m5_24xlarge_search: "m5.24xlarge.search";
  readonly m5_2xlarge_search: "m5.2xlarge.search";
  readonly m5_4xlarge_search: "m5.4xlarge.search";
  readonly m5_large_search: "m5.large.search";
  readonly m5_xlarge_search: "m5.xlarge.search";
  readonly m6g_12xlarge_search: "m6g.12xlarge.search";
  readonly m6g_2xlarge_search: "m6g.2xlarge.search";
  readonly m6g_4xlarge_search: "m6g.4xlarge.search";
  readonly m6g_8xlarge_search: "m6g.8xlarge.search";
  readonly m6g_large_search: "m6g.large.search";
  readonly m6g_xlarge_search: "m6g.xlarge.search";
  readonly or1_12xlarge_search: "or1.12xlarge.search";
  readonly or1_16xlarge_search: "or1.16xlarge.search";
  readonly or1_2xlarge_search: "or1.2xlarge.search";
  readonly or1_4xlarge_search: "or1.4xlarge.search";
  readonly or1_8xlarge_search: "or1.8xlarge.search";
  readonly or1_large_search: "or1.large.search";
  readonly or1_medium_search: "or1.medium.search";
  readonly or1_xlarge_search: "or1.xlarge.search";
  readonly r3_2xlarge_search: "r3.2xlarge.search";
  readonly r3_4xlarge_search: "r3.4xlarge.search";
  readonly r3_8xlarge_search: "r3.8xlarge.search";
  readonly r3_large_search: "r3.large.search";
  readonly r3_xlarge_search: "r3.xlarge.search";
  readonly r4_16xlarge_search: "r4.16xlarge.search";
  readonly r4_2xlarge_search: "r4.2xlarge.search";
  readonly r4_4xlarge_search: "r4.4xlarge.search";
  readonly r4_8xlarge_search: "r4.8xlarge.search";
  readonly r4_large_search: "r4.large.search";
  readonly r4_xlarge_search: "r4.xlarge.search";
  readonly r5_12xlarge_search: "r5.12xlarge.search";
  readonly r5_24xlarge_search: "r5.24xlarge.search";
  readonly r5_2xlarge_search: "r5.2xlarge.search";
  readonly r5_4xlarge_search: "r5.4xlarge.search";
  readonly r5_large_search: "r5.large.search";
  readonly r5_xlarge_search: "r5.xlarge.search";
  readonly r6g_12xlarge_search: "r6g.12xlarge.search";
  readonly r6g_2xlarge_search: "r6g.2xlarge.search";
  readonly r6g_4xlarge_search: "r6g.4xlarge.search";
  readonly r6g_8xlarge_search: "r6g.8xlarge.search";
  readonly r6g_large_search: "r6g.large.search";
  readonly r6g_xlarge_search: "r6g.xlarge.search";
  readonly r6gd_12xlarge_search: "r6gd.12xlarge.search";
  readonly r6gd_16xlarge_search: "r6gd.16xlarge.search";
  readonly r6gd_2xlarge_search: "r6gd.2xlarge.search";
  readonly r6gd_4xlarge_search: "r6gd.4xlarge.search";
  readonly r6gd_8xlarge_search: "r6gd.8xlarge.search";
  readonly r6gd_large_search: "r6gd.large.search";
  readonly r6gd_xlarge_search: "r6gd.xlarge.search";
  readonly t2_medium_search: "t2.medium.search";
  readonly t2_micro_search: "t2.micro.search";
  readonly t2_small_search: "t2.small.search";
  readonly t3_2xlarge_search: "t3.2xlarge.search";
  readonly t3_large_search: "t3.large.search";
  readonly t3_medium_search: "t3.medium.search";
  readonly t3_micro_search: "t3.micro.search";
  readonly t3_nano_search: "t3.nano.search";
  readonly t3_small_search: "t3.small.search";
  readonly t3_xlarge_search: "t3.xlarge.search";
  readonly t4g_medium_search: "t4g.medium.search";
  readonly t4g_small_search: "t4g.small.search";
  readonly ultrawarm1_large_search: "ultrawarm1.large.search";
  readonly ultrawarm1_medium_search: "ultrawarm1.medium.search";
  readonly ultrawarm1_xlarge_search: "ultrawarm1.xlarge.search";
};
export type OpenSearchPartitionInstanceType =
  (typeof OpenSearchPartitionInstanceType)[keyof typeof OpenSearchPartitionInstanceType];
export interface NodeConfig {
  Enabled?: boolean | undefined;
  Type?: OpenSearchPartitionInstanceType | undefined;
  Count?: number | undefined;
}
export declare const NodeOptionsNodeType: {
  readonly COORDINATOR: "coordinator";
};
export type NodeOptionsNodeType =
  (typeof NodeOptionsNodeType)[keyof typeof NodeOptionsNodeType];
export interface NodeOption {
  NodeType?: NodeOptionsNodeType | undefined;
  NodeConfig?: NodeConfig | undefined;
}
export declare const OpenSearchWarmPartitionInstanceType: {
  readonly ultrawarm1_large_search: "ultrawarm1.large.search";
  readonly ultrawarm1_medium_search: "ultrawarm1.medium.search";
  readonly ultrawarm1_xlarge_search: "ultrawarm1.xlarge.search";
};
export type OpenSearchWarmPartitionInstanceType =
  (typeof OpenSearchWarmPartitionInstanceType)[keyof typeof OpenSearchWarmPartitionInstanceType];
export interface ZoneAwarenessConfig {
  AvailabilityZoneCount?: number | undefined;
}
export interface ClusterConfig {
  InstanceType?: OpenSearchPartitionInstanceType | undefined;
  InstanceCount?: number | undefined;
  DedicatedMasterEnabled?: boolean | undefined;
  ZoneAwarenessEnabled?: boolean | undefined;
  ZoneAwarenessConfig?: ZoneAwarenessConfig | undefined;
  DedicatedMasterType?: OpenSearchPartitionInstanceType | undefined;
  DedicatedMasterCount?: number | undefined;
  WarmEnabled?: boolean | undefined;
  WarmType?: OpenSearchWarmPartitionInstanceType | undefined;
  WarmCount?: number | undefined;
  ColdStorageOptions?: ColdStorageOptions | undefined;
  MultiAZWithStandbyEnabled?: boolean | undefined;
  NodeOptions?: NodeOption[] | undefined;
}
export interface CognitoOptions {
  Enabled?: boolean | undefined;
  UserPoolId?: string | undefined;
  IdentityPoolId?: string | undefined;
  RoleArn?: string | undefined;
}
export declare const TLSSecurityPolicy: {
  readonly POLICY_MIN_TLS_1_0_2019_07: "Policy-Min-TLS-1-0-2019-07";
  readonly POLICY_MIN_TLS_1_2_2019_07: "Policy-Min-TLS-1-2-2019-07";
  readonly POLICY_MIN_TLS_1_2_PFS_2023_10: "Policy-Min-TLS-1-2-PFS-2023-10";
};
export type TLSSecurityPolicy =
  (typeof TLSSecurityPolicy)[keyof typeof TLSSecurityPolicy];
export interface DomainEndpointOptions {
  EnforceHTTPS?: boolean | undefined;
  TLSSecurityPolicy?: TLSSecurityPolicy | undefined;
  CustomEndpointEnabled?: boolean | undefined;
  CustomEndpoint?: string | undefined;
  CustomEndpointCertificateArn?: string | undefined;
}
export declare const VolumeType: {
  readonly gp2: "gp2";
  readonly gp3: "gp3";
  readonly io1: "io1";
  readonly standard: "standard";
};
export type VolumeType = (typeof VolumeType)[keyof typeof VolumeType];
export interface EBSOptions {
  EBSEnabled?: boolean | undefined;
  VolumeType?: VolumeType | undefined;
  VolumeSize?: number | undefined;
  Iops?: number | undefined;
  Throughput?: number | undefined;
}
export interface EncryptionAtRestOptions {
  Enabled?: boolean | undefined;
  KmsKeyId?: string | undefined;
}
export declare const RolesKeyIdCOption: {
  readonly GroupId: "GroupId";
  readonly GroupName: "GroupName";
};
export type RolesKeyIdCOption =
  (typeof RolesKeyIdCOption)[keyof typeof RolesKeyIdCOption];
export declare const SubjectKeyIdCOption: {
  readonly Email: "Email";
  readonly UserId: "UserId";
  readonly UserName: "UserName";
};
export type SubjectKeyIdCOption =
  (typeof SubjectKeyIdCOption)[keyof typeof SubjectKeyIdCOption];
export interface IdentityCenterOptionsInput {
  EnabledAPIAccess?: boolean | undefined;
  IdentityCenterInstanceARN?: string | undefined;
  SubjectKey?: SubjectKeyIdCOption | undefined;
  RolesKey?: RolesKeyIdCOption | undefined;
}
export declare const IPAddressType: {
  readonly DUALSTACK: "dualstack";
  readonly IPV4: "ipv4";
};
export type IPAddressType = (typeof IPAddressType)[keyof typeof IPAddressType];
export declare const LogType: {
  readonly AUDIT_LOGS: "AUDIT_LOGS";
  readonly ES_APPLICATION_LOGS: "ES_APPLICATION_LOGS";
  readonly INDEX_SLOW_LOGS: "INDEX_SLOW_LOGS";
  readonly SEARCH_SLOW_LOGS: "SEARCH_SLOW_LOGS";
};
export type LogType = (typeof LogType)[keyof typeof LogType];
export interface LogPublishingOption {
  CloudWatchLogsLogGroupArn?: string | undefined;
  Enabled?: boolean | undefined;
}
export interface NodeToNodeEncryptionOptions {
  Enabled?: boolean | undefined;
}
export interface WindowStartTime {
  Hours: number | undefined;
  Minutes: number | undefined;
}
export interface OffPeakWindow {
  WindowStartTime?: WindowStartTime | undefined;
}
export interface OffPeakWindowOptions {
  Enabled?: boolean | undefined;
  OffPeakWindow?: OffPeakWindow | undefined;
}
export interface SnapshotOptions {
  AutomatedSnapshotStartHour?: number | undefined;
}
export interface SoftwareUpdateOptions {
  AutoSoftwareUpdateEnabled?: boolean | undefined;
}
export interface VPCOptions {
  SubnetIds?: string[] | undefined;
  SecurityGroupIds?: string[] | undefined;
}
export interface CreateDomainRequest {
  DomainName: string | undefined;
  EngineVersion?: string | undefined;
  ClusterConfig?: ClusterConfig | undefined;
  EBSOptions?: EBSOptions | undefined;
  AccessPolicies?: string | undefined;
  IPAddressType?: IPAddressType | undefined;
  SnapshotOptions?: SnapshotOptions | undefined;
  VPCOptions?: VPCOptions | undefined;
  CognitoOptions?: CognitoOptions | undefined;
  EncryptionAtRestOptions?: EncryptionAtRestOptions | undefined;
  NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions | undefined;
  AdvancedOptions?: Record<string, string> | undefined;
  LogPublishingOptions?:
    | Partial<Record<LogType, LogPublishingOption>>
    | undefined;
  DomainEndpointOptions?: DomainEndpointOptions | undefined;
  AdvancedSecurityOptions?: AdvancedSecurityOptionsInput | undefined;
  IdentityCenterOptions?: IdentityCenterOptionsInput | undefined;
  TagList?: Tag[] | undefined;
  AutoTuneOptions?: AutoTuneOptionsInput | undefined;
  OffPeakWindowOptions?: OffPeakWindowOptions | undefined;
  SoftwareUpdateOptions?: SoftwareUpdateOptions | undefined;
  AIMLOptions?: AIMLOptionsInput | undefined;
}
export declare const AutoTuneState: {
  readonly DISABLED: "DISABLED";
  readonly DISABLED_AND_ROLLBACK_COMPLETE: "DISABLED_AND_ROLLBACK_COMPLETE";
  readonly DISABLED_AND_ROLLBACK_ERROR: "DISABLED_AND_ROLLBACK_ERROR";
  readonly DISABLED_AND_ROLLBACK_IN_PROGRESS: "DISABLED_AND_ROLLBACK_IN_PROGRESS";
  readonly DISABLED_AND_ROLLBACK_SCHEDULED: "DISABLED_AND_ROLLBACK_SCHEDULED";
  readonly DISABLE_IN_PROGRESS: "DISABLE_IN_PROGRESS";
  readonly ENABLED: "ENABLED";
  readonly ENABLE_IN_PROGRESS: "ENABLE_IN_PROGRESS";
  readonly ERROR: "ERROR";
};
export type AutoTuneState = (typeof AutoTuneState)[keyof typeof AutoTuneState];
export interface AutoTuneOptionsOutput {
  State?: AutoTuneState | undefined;
  ErrorMessage?: string | undefined;
  UseOffPeakWindow?: boolean | undefined;
}
export declare const ConfigChangeStatus: {
  readonly APPLYING_CHANGES: "ApplyingChanges";
  readonly CANCELLED: "Cancelled";
  readonly COMPLETED: "Completed";
  readonly INITIALIZING: "Initializing";
  readonly PENDING: "Pending";
  readonly PENDING_USER_INPUT: "PendingUserInput";
  readonly VALIDATING: "Validating";
  readonly VALIDATION_FAILED: "ValidationFailed";
};
export type ConfigChangeStatus =
  (typeof ConfigChangeStatus)[keyof typeof ConfigChangeStatus];
export declare const InitiatedBy: {
  readonly CUSTOMER: "CUSTOMER";
  readonly SERVICE: "SERVICE";
};
export type InitiatedBy = (typeof InitiatedBy)[keyof typeof InitiatedBy];
export interface ChangeProgressDetails {
  ChangeId?: string | undefined;
  Message?: string | undefined;
  ConfigChangeStatus?: ConfigChangeStatus | undefined;
  InitiatedBy?: InitiatedBy | undefined;
  StartTime?: Date | undefined;
  LastUpdatedTime?: Date | undefined;
}
export declare const DomainProcessingStatusType: {
  readonly ACTIVE: "Active";
  readonly CREATING: "Creating";
  readonly DELETING: "Deleting";
  readonly ISOLATED: "Isolated";
  readonly MODIFYING: "Modifying";
  readonly UPDATING: "UpdatingServiceSoftware";
  readonly UPGRADING: "UpgradingEngineVersion";
};
export type DomainProcessingStatusType =
  (typeof DomainProcessingStatusType)[keyof typeof DomainProcessingStatusType];
export interface IdentityCenterOptions {
  EnabledAPIAccess?: boolean | undefined;
  IdentityCenterInstanceARN?: string | undefined;
  SubjectKey?: SubjectKeyIdCOption | undefined;
  RolesKey?: RolesKeyIdCOption | undefined;
  IdentityCenterApplicationARN?: string | undefined;
  IdentityStoreId?: string | undefined;
}
export declare const PropertyValueType: {
  readonly PLAIN_TEXT: "PLAIN_TEXT";
  readonly STRINGIFIED_JSON: "STRINGIFIED_JSON";
};
export type PropertyValueType =
  (typeof PropertyValueType)[keyof typeof PropertyValueType];
export interface ModifyingProperties {
  Name?: string | undefined;
  ActiveValue?: string | undefined;
  PendingValue?: string | undefined;
  ValueType?: PropertyValueType | undefined;
}
export interface VPCDerivedInfo {
  VPCId?: string | undefined;
  SubnetIds?: string[] | undefined;
  AvailabilityZones?: string[] | undefined;
  SecurityGroupIds?: string[] | undefined;
}
export interface DomainStatus {
  DomainId: string | undefined;
  DomainName: string | undefined;
  ARN: string | undefined;
  Created?: boolean | undefined;
  Deleted?: boolean | undefined;
  Endpoint?: string | undefined;
  EndpointV2?: string | undefined;
  Endpoints?: Record<string, string> | undefined;
  DomainEndpointV2HostedZoneId?: string | undefined;
  Processing?: boolean | undefined;
  UpgradeProcessing?: boolean | undefined;
  EngineVersion?: string | undefined;
  ClusterConfig: ClusterConfig | undefined;
  EBSOptions?: EBSOptions | undefined;
  AccessPolicies?: string | undefined;
  IPAddressType?: IPAddressType | undefined;
  SnapshotOptions?: SnapshotOptions | undefined;
  VPCOptions?: VPCDerivedInfo | undefined;
  CognitoOptions?: CognitoOptions | undefined;
  EncryptionAtRestOptions?: EncryptionAtRestOptions | undefined;
  NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptions | undefined;
  AdvancedOptions?: Record<string, string> | undefined;
  LogPublishingOptions?:
    | Partial<Record<LogType, LogPublishingOption>>
    | undefined;
  ServiceSoftwareOptions?: ServiceSoftwareOptions | undefined;
  DomainEndpointOptions?: DomainEndpointOptions | undefined;
  AdvancedSecurityOptions?: AdvancedSecurityOptions | undefined;
  IdentityCenterOptions?: IdentityCenterOptions | undefined;
  AutoTuneOptions?: AutoTuneOptionsOutput | undefined;
  ChangeProgressDetails?: ChangeProgressDetails | undefined;
  OffPeakWindowOptions?: OffPeakWindowOptions | undefined;
  SoftwareUpdateOptions?: SoftwareUpdateOptions | undefined;
  DomainProcessingStatus?: DomainProcessingStatusType | undefined;
  ModifyingProperties?: ModifyingProperties[] | undefined;
  AIMLOptions?: AIMLOptionsOutput | undefined;
}
export interface CreateDomainResponse {
  DomainStatus?: DomainStatus | undefined;
}
export declare class InvalidTypeException extends __BaseException {
  readonly name: "InvalidTypeException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<InvalidTypeException, __BaseException>
  );
}
export declare class ResourceAlreadyExistsException extends __BaseException {
  readonly name: "ResourceAlreadyExistsException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<ResourceAlreadyExistsException, __BaseException>
  );
}
export declare const SkipUnavailableStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type SkipUnavailableStatus =
  (typeof SkipUnavailableStatus)[keyof typeof SkipUnavailableStatus];
export interface CrossClusterSearchConnectionProperties {
  SkipUnavailable?: SkipUnavailableStatus | undefined;
}
export interface ConnectionProperties {
  Endpoint?: string | undefined;
  CrossClusterSearch?: CrossClusterSearchConnectionProperties | undefined;
}
export interface CreateOutboundConnectionRequest {
  LocalDomainInfo: DomainInformationContainer | undefined;
  RemoteDomainInfo: DomainInformationContainer | undefined;
  ConnectionAlias: string | undefined;
  ConnectionMode?: ConnectionMode | undefined;
  ConnectionProperties?: ConnectionProperties | undefined;
}
export declare const OutboundConnectionStatusCode: {
  readonly ACTIVE: "ACTIVE";
  readonly APPROVED: "APPROVED";
  readonly DELETED: "DELETED";
  readonly DELETING: "DELETING";
  readonly PENDING_ACCEPTANCE: "PENDING_ACCEPTANCE";
  readonly PROVISIONING: "PROVISIONING";
  readonly REJECTED: "REJECTED";
  readonly REJECTING: "REJECTING";
  readonly VALIDATING: "VALIDATING";
  readonly VALIDATION_FAILED: "VALIDATION_FAILED";
};
export type OutboundConnectionStatusCode =
  (typeof OutboundConnectionStatusCode)[keyof typeof OutboundConnectionStatusCode];
export interface OutboundConnectionStatus {
  StatusCode?: OutboundConnectionStatusCode | undefined;
  Message?: string | undefined;
}
export interface CreateOutboundConnectionResponse {
  LocalDomainInfo?: DomainInformationContainer | undefined;
  RemoteDomainInfo?: DomainInformationContainer | undefined;
  ConnectionAlias?: string | undefined;
  ConnectionStatus?: OutboundConnectionStatus | undefined;
  ConnectionId?: string | undefined;
  ConnectionMode?: ConnectionMode | undefined;
  ConnectionProperties?: ConnectionProperties | undefined;
}
export declare const RequirementLevel: {
  readonly NONE: "NONE";
  readonly OPTIONAL: "OPTIONAL";
  readonly REQUIRED: "REQUIRED";
};
export type RequirementLevel =
  (typeof RequirementLevel)[keyof typeof RequirementLevel];
export interface PackageConfiguration {
  LicenseRequirement: RequirementLevel | undefined;
  LicenseFilepath?: string | undefined;
  ConfigurationRequirement: RequirementLevel | undefined;
  RequiresRestartForConfigurationUpdate?: boolean | undefined;
}
export interface PackageEncryptionOptions {
  KmsKeyIdentifier?: string | undefined;
  EncryptionEnabled: boolean | undefined;
}
export interface PackageSource {
  S3BucketName?: string | undefined;
  S3Key?: string | undefined;
}
export interface PackageVendingOptions {
  VendingEnabled: boolean | undefined;
}
export interface CreatePackageRequest {
  PackageName: string | undefined;
  PackageType: PackageType | undefined;
  PackageDescription?: string | undefined;
  PackageSource: PackageSource | undefined;
  PackageConfiguration?: PackageConfiguration | undefined;
  EngineVersion?: string | undefined;
  PackageVendingOptions?: PackageVendingOptions | undefined;
  PackageEncryptionOptions?: PackageEncryptionOptions | undefined;
}
export interface PluginProperties {
  Name?: string | undefined;
  Description?: string | undefined;
  Version?: string | undefined;
  ClassName?: string | undefined;
  UncompressedSizeInBytes?: number | undefined;
}
export declare const PackageStatus: {
  readonly AVAILABLE: "AVAILABLE";
  readonly COPYING: "COPYING";
  readonly COPY_FAILED: "COPY_FAILED";
  readonly DELETED: "DELETED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly VALIDATING: "VALIDATING";
  readonly VALIDATION_FAILED: "VALIDATION_FAILED";
};
export type PackageStatus = (typeof PackageStatus)[keyof typeof PackageStatus];
export interface PackageDetails {
  PackageID?: string | undefined;
  PackageName?: string | undefined;
  PackageType?: PackageType | undefined;
  PackageDescription?: string | undefined;
  PackageStatus?: PackageStatus | undefined;
  CreatedAt?: Date | undefined;
  LastUpdatedAt?: Date | undefined;
  AvailablePackageVersion?: string | undefined;
  ErrorDetails?: ErrorDetails | undefined;
  EngineVersion?: string | undefined;
  AvailablePluginProperties?: PluginProperties | undefined;
  AvailablePackageConfiguration?: PackageConfiguration | undefined;
  AllowListedUserList?: string[] | undefined;
  PackageOwner?: string | undefined;
  PackageVendingOptions?: PackageVendingOptions | undefined;
  PackageEncryptionOptions?: PackageEncryptionOptions | undefined;
}
export interface CreatePackageResponse {
  PackageDetails?: PackageDetails | undefined;
}
export interface CreateVpcEndpointRequest {
  DomainArn: string | undefined;
  VpcOptions: VPCOptions | undefined;
  ClientToken?: string | undefined;
}
export declare const VpcEndpointStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATE_FAILED: "CREATE_FAILED";
  readonly CREATING: "CREATING";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly UPDATE_FAILED: "UPDATE_FAILED";
  readonly UPDATING: "UPDATING";
};
export type VpcEndpointStatus =
  (typeof VpcEndpointStatus)[keyof typeof VpcEndpointStatus];
export interface VpcEndpoint {
  VpcEndpointId?: string | undefined;
  VpcEndpointOwner?: string | undefined;
  DomainArn?: string | undefined;
  VpcOptions?: VPCDerivedInfo | undefined;
  Status?: VpcEndpointStatus | undefined;
  Endpoint?: string | undefined;
}
export interface CreateVpcEndpointResponse {
  VpcEndpoint: VpcEndpoint | undefined;
}
export interface DeleteApplicationRequest {
  id: string | undefined;
}
export interface DeleteApplicationResponse {}
export interface DeleteDataSourceRequest {
  DomainName: string | undefined;
  Name: string | undefined;
}
export interface DeleteDataSourceResponse {
  Message?: string | undefined;
}
export interface DeleteDirectQueryDataSourceRequest {
  DataSourceName: string | undefined;
}
export interface DeleteDomainRequest {
  DomainName: string | undefined;
}
export interface DeleteDomainResponse {
  DomainStatus?: DomainStatus | undefined;
}
export interface DeleteInboundConnectionRequest {
  ConnectionId: string | undefined;
}
export interface DeleteInboundConnectionResponse {
  Connection?: InboundConnection | undefined;
}
export interface DeleteOutboundConnectionRequest {
  ConnectionId: string | undefined;
}
export interface OutboundConnection {
  LocalDomainInfo?: DomainInformationContainer | undefined;
  RemoteDomainInfo?: DomainInformationContainer | undefined;
  ConnectionId?: string | undefined;
  ConnectionAlias?: string | undefined;
  ConnectionStatus?: OutboundConnectionStatus | undefined;
  ConnectionMode?: ConnectionMode | undefined;
  ConnectionProperties?: ConnectionProperties | undefined;
}
export interface DeleteOutboundConnectionResponse {
  Connection?: OutboundConnection | undefined;
}
export interface DeletePackageRequest {
  PackageID: string | undefined;
}
export interface DeletePackageResponse {
  PackageDetails?: PackageDetails | undefined;
}
export interface DeleteVpcEndpointRequest {
  VpcEndpointId: string | undefined;
}
export interface VpcEndpointSummary {
  VpcEndpointId?: string | undefined;
  VpcEndpointOwner?: string | undefined;
  DomainArn?: string | undefined;
  Status?: VpcEndpointStatus | undefined;
}
export interface DeleteVpcEndpointResponse {
  VpcEndpointSummary: VpcEndpointSummary | undefined;
}
export interface DescribeDomainRequest {
  DomainName: string | undefined;
}
export interface DescribeDomainResponse {
  DomainStatus: DomainStatus | undefined;
}
export interface DescribeDomainAutoTunesRequest {
  DomainName: string | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export declare const ScheduledAutoTuneActionType: {
  readonly JVM_HEAP_SIZE_TUNING: "JVM_HEAP_SIZE_TUNING";
  readonly JVM_YOUNG_GEN_TUNING: "JVM_YOUNG_GEN_TUNING";
};
export type ScheduledAutoTuneActionType =
  (typeof ScheduledAutoTuneActionType)[keyof typeof ScheduledAutoTuneActionType];
export declare const ScheduledAutoTuneSeverityType: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type ScheduledAutoTuneSeverityType =
  (typeof ScheduledAutoTuneSeverityType)[keyof typeof ScheduledAutoTuneSeverityType];
export interface ScheduledAutoTuneDetails {
  Date?: Date | undefined;
  ActionType?: ScheduledAutoTuneActionType | undefined;
  Action?: string | undefined;
  Severity?: ScheduledAutoTuneSeverityType | undefined;
}
export interface AutoTuneDetails {
  ScheduledAutoTuneDetails?: ScheduledAutoTuneDetails | undefined;
}
export declare const AutoTuneType: {
  readonly SCHEDULED_ACTION: "SCHEDULED_ACTION";
};
export type AutoTuneType = (typeof AutoTuneType)[keyof typeof AutoTuneType];
export interface AutoTune {
  AutoTuneType?: AutoTuneType | undefined;
  AutoTuneDetails?: AutoTuneDetails | undefined;
}
export interface DescribeDomainAutoTunesResponse {
  AutoTunes?: AutoTune[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeDomainChangeProgressRequest {
  DomainName: string | undefined;
  ChangeId?: string | undefined;
}
export interface ChangeProgressStage {
  Name?: string | undefined;
  Status?: string | undefined;
  Description?: string | undefined;
  LastUpdated?: Date | undefined;
}
export declare const OverallChangeStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly PENDING: "PENDING";
  readonly PROCESSING: "PROCESSING";
};
export type OverallChangeStatus =
  (typeof OverallChangeStatus)[keyof typeof OverallChangeStatus];
export interface ChangeProgressStatusDetails {
  ChangeId?: string | undefined;
  StartTime?: Date | undefined;
  Status?: OverallChangeStatus | undefined;
  PendingProperties?: string[] | undefined;
  CompletedProperties?: string[] | undefined;
  TotalNumberOfStages?: number | undefined;
  ChangeProgressStages?: ChangeProgressStage[] | undefined;
  LastUpdatedTime?: Date | undefined;
  ConfigChangeStatus?: ConfigChangeStatus | undefined;
  InitiatedBy?: InitiatedBy | undefined;
}
export interface DescribeDomainChangeProgressResponse {
  ChangeProgressStatus?: ChangeProgressStatusDetails | undefined;
}
export interface DescribeDomainConfigRequest {
  DomainName: string | undefined;
}
export declare const RollbackOnDisable: {
  readonly DEFAULT_ROLLBACK: "DEFAULT_ROLLBACK";
  readonly NO_ROLLBACK: "NO_ROLLBACK";
};
export type RollbackOnDisable =
  (typeof RollbackOnDisable)[keyof typeof RollbackOnDisable];
export interface AutoTuneOptions {
  DesiredState?: AutoTuneDesiredState | undefined;
  RollbackOnDisable?: RollbackOnDisable | undefined;
  MaintenanceSchedules?: AutoTuneMaintenanceSchedule[] | undefined;
  UseOffPeakWindow?: boolean | undefined;
}
export interface AutoTuneStatus {
  CreationDate: Date | undefined;
  UpdateDate: Date | undefined;
  UpdateVersion?: number | undefined;
  State: AutoTuneState | undefined;
  ErrorMessage?: string | undefined;
  PendingDeletion?: boolean | undefined;
}
export interface AutoTuneOptionsStatus {
  Options?: AutoTuneOptions | undefined;
  Status?: AutoTuneStatus | undefined;
}
export interface ClusterConfigStatus {
  Options: ClusterConfig | undefined;
  Status: OptionStatus | undefined;
}
export interface CognitoOptionsStatus {
  Options: CognitoOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface DomainEndpointOptionsStatus {
  Options: DomainEndpointOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface EBSOptionsStatus {
  Options: EBSOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface EncryptionAtRestOptionsStatus {
  Options: EncryptionAtRestOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface VersionStatus {
  Options: string | undefined;
  Status: OptionStatus | undefined;
}
export interface IdentityCenterOptionsStatus {
  Options: IdentityCenterOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface IPAddressTypeStatus {
  Options: IPAddressType | undefined;
  Status: OptionStatus | undefined;
}
export interface LogPublishingOptionsStatus {
  Options?: Partial<Record<LogType, LogPublishingOption>> | undefined;
  Status?: OptionStatus | undefined;
}
export interface NodeToNodeEncryptionOptionsStatus {
  Options: NodeToNodeEncryptionOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface OffPeakWindowOptionsStatus {
  Options?: OffPeakWindowOptions | undefined;
  Status?: OptionStatus | undefined;
}
export interface SnapshotOptionsStatus {
  Options: SnapshotOptions | undefined;
  Status: OptionStatus | undefined;
}
export interface SoftwareUpdateOptionsStatus {
  Options?: SoftwareUpdateOptions | undefined;
  Status?: OptionStatus | undefined;
}
export interface VPCDerivedInfoStatus {
  Options: VPCDerivedInfo | undefined;
  Status: OptionStatus | undefined;
}
export interface DomainConfig {
  EngineVersion?: VersionStatus | undefined;
  ClusterConfig?: ClusterConfigStatus | undefined;
  EBSOptions?: EBSOptionsStatus | undefined;
  AccessPolicies?: AccessPoliciesStatus | undefined;
  IPAddressType?: IPAddressTypeStatus | undefined;
  SnapshotOptions?: SnapshotOptionsStatus | undefined;
  VPCOptions?: VPCDerivedInfoStatus | undefined;
  CognitoOptions?: CognitoOptionsStatus | undefined;
  EncryptionAtRestOptions?: EncryptionAtRestOptionsStatus | undefined;
  NodeToNodeEncryptionOptions?: NodeToNodeEncryptionOptionsStatus | undefined;
  AdvancedOptions?: AdvancedOptionsStatus | undefined;
  LogPublishingOptions?: LogPublishingOptionsStatus | undefined;
  DomainEndpointOptions?: DomainEndpointOptionsStatus | undefined;
  AdvancedSecurityOptions?: AdvancedSecurityOptionsStatus | undefined;
  IdentityCenterOptions?: IdentityCenterOptionsStatus | undefined;
  AutoTuneOptions?: AutoTuneOptionsStatus | undefined;
  ChangeProgressDetails?: ChangeProgressDetails | undefined;
  OffPeakWindowOptions?: OffPeakWindowOptionsStatus | undefined;
  SoftwareUpdateOptions?: SoftwareUpdateOptionsStatus | undefined;
  ModifyingProperties?: ModifyingProperties[] | undefined;
  AIMLOptions?: AIMLOptionsStatus | undefined;
}
export interface DescribeDomainConfigResponse {
  DomainConfig: DomainConfig | undefined;
}
export interface DescribeDomainHealthRequest {
  DomainName: string | undefined;
}
export declare const DomainHealth: {
  readonly Green: "Green";
  readonly NotAvailable: "NotAvailable";
  readonly Red: "Red";
  readonly Yellow: "Yellow";
};
export type DomainHealth = (typeof DomainHealth)[keyof typeof DomainHealth];
export declare const DomainState: {
  readonly Active: "Active";
  readonly NotAvailable: "NotAvailable";
  readonly Processing: "Processing";
};
export type DomainState = (typeof DomainState)[keyof typeof DomainState];
export declare const ZoneStatus: {
  readonly Active: "Active";
  readonly NotAvailable: "NotAvailable";
  readonly StandBy: "StandBy";
};
export type ZoneStatus = (typeof ZoneStatus)[keyof typeof ZoneStatus];
export interface AvailabilityZoneInfo {
  AvailabilityZoneName?: string | undefined;
  ZoneStatus?: ZoneStatus | undefined;
  ConfiguredDataNodeCount?: string | undefined;
  AvailableDataNodeCount?: string | undefined;
  TotalShards?: string | undefined;
  TotalUnAssignedShards?: string | undefined;
}
export interface EnvironmentInfo {
  AvailabilityZoneInformation?: AvailabilityZoneInfo[] | undefined;
}
export declare const MasterNodeStatus: {
  readonly Available: "Available";
  readonly UnAvailable: "UnAvailable";
};
export type MasterNodeStatus =
  (typeof MasterNodeStatus)[keyof typeof MasterNodeStatus];
export interface DescribeDomainHealthResponse {
  DomainState?: DomainState | undefined;
  AvailabilityZoneCount?: string | undefined;
  ActiveAvailabilityZoneCount?: string | undefined;
  StandByAvailabilityZoneCount?: string | undefined;
  DataNodeCount?: string | undefined;
  DedicatedMaster?: boolean | undefined;
  MasterEligibleNodeCount?: string | undefined;
  WarmNodeCount?: string | undefined;
  MasterNode?: MasterNodeStatus | undefined;
  ClusterHealth?: DomainHealth | undefined;
  TotalShards?: string | undefined;
  TotalUnAssignedShards?: string | undefined;
  EnvironmentInformation?: EnvironmentInfo[] | undefined;
}
export interface DescribeDomainNodesRequest {
  DomainName: string | undefined;
}
export declare const NodeStatus: {
  readonly Active: "Active";
  readonly NotAvailable: "NotAvailable";
  readonly StandBy: "StandBy";
};
export type NodeStatus = (typeof NodeStatus)[keyof typeof NodeStatus];
export declare const NodeType: {
  readonly Data: "Data";
  readonly Master: "Master";
  readonly Ultrawarm: "Ultrawarm";
};
export type NodeType = (typeof NodeType)[keyof typeof NodeType];
export interface DomainNodesStatus {
  NodeId?: string | undefined;
  NodeType?: NodeType | undefined;
  AvailabilityZone?: string | undefined;
  InstanceType?: OpenSearchPartitionInstanceType | undefined;
  NodeStatus?: NodeStatus | undefined;
  StorageType?: string | undefined;
  StorageVolumeType?: VolumeType | undefined;
  StorageSize?: string | undefined;
}
export interface DescribeDomainNodesResponse {
  DomainNodesStatusList?: DomainNodesStatus[] | undefined;
}
export interface DescribeDomainsRequest {
  DomainNames: string[] | undefined;
}
export interface DescribeDomainsResponse {
  DomainStatusList: DomainStatus[] | undefined;
}
export interface DescribeDryRunProgressRequest {
  DomainName: string | undefined;
  DryRunId?: string | undefined;
  LoadDryRunConfig?: boolean | undefined;
}
export interface ValidationFailure {
  Code?: string | undefined;
  Message?: string | undefined;
}
export interface DryRunProgressStatus {
  DryRunId: string | undefined;
  DryRunStatus: string | undefined;
  CreationDate: string | undefined;
  UpdateDate: string | undefined;
  ValidationFailures?: ValidationFailure[] | undefined;
}
export interface DryRunResults {
  DeploymentType?: string | undefined;
  Message?: string | undefined;
}
export interface DescribeDryRunProgressResponse {
  DryRunProgressStatus?: DryRunProgressStatus | undefined;
  DryRunConfig?: DomainStatus | undefined;
  DryRunResults?: DryRunResults | undefined;
}
export interface Filter {
  Name?: string | undefined;
  Values?: string[] | undefined;
}
export interface DescribeInboundConnectionsRequest {
  Filters?: Filter[] | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeInboundConnectionsResponse {
  Connections?: InboundConnection[] | undefined;
  NextToken?: string | undefined;
}
export declare class InvalidPaginationTokenException extends __BaseException {
  readonly name: "InvalidPaginationTokenException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      InvalidPaginationTokenException,
      __BaseException
    >
  );
}
export interface DescribeInstanceTypeLimitsRequest {
  DomainName?: string | undefined;
  InstanceType: OpenSearchPartitionInstanceType | undefined;
  EngineVersion: string | undefined;
}
export interface InstanceCountLimits {
  MinimumInstanceCount?: number | undefined;
  MaximumInstanceCount?: number | undefined;
}
export interface InstanceLimits {
  InstanceCountLimits?: InstanceCountLimits | undefined;
}
export interface StorageTypeLimit {
  LimitName?: string | undefined;
  LimitValues?: string[] | undefined;
}
export interface StorageType {
  StorageTypeName?: string | undefined;
  StorageSubTypeName?: string | undefined;
  StorageTypeLimits?: StorageTypeLimit[] | undefined;
}
export interface Limits {
  StorageTypes?: StorageType[] | undefined;
  InstanceLimits?: InstanceLimits | undefined;
  AdditionalLimits?: AdditionalLimit[] | undefined;
}
export interface DescribeInstanceTypeLimitsResponse {
  LimitsByRole?: Record<string, Limits> | undefined;
}
export interface DescribeOutboundConnectionsRequest {
  Filters?: Filter[] | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribeOutboundConnectionsResponse {
  Connections?: OutboundConnection[] | undefined;
  NextToken?: string | undefined;
}
export declare const DescribePackagesFilterName: {
  readonly EngineVersion: "EngineVersion";
  readonly PackageID: "PackageID";
  readonly PackageName: "PackageName";
  readonly PackageOwner: "PackageOwner";
  readonly PackageStatus: "PackageStatus";
  readonly PackageType: "PackageType";
};
export type DescribePackagesFilterName =
  (typeof DescribePackagesFilterName)[keyof typeof DescribePackagesFilterName];
export interface DescribePackagesFilter {
  Name?: DescribePackagesFilterName | undefined;
  Value?: string[] | undefined;
}
export interface DescribePackagesRequest {
  Filters?: DescribePackagesFilter[] | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export interface DescribePackagesResponse {
  PackageDetailsList?: PackageDetails[] | undefined;
  NextToken?: string | undefined;
}
export interface DescribeReservedInstanceOfferingsRequest {
  ReservedInstanceOfferingId?: string | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export declare const ReservedInstancePaymentOption: {
  readonly ALL_UPFRONT: "ALL_UPFRONT";
  readonly NO_UPFRONT: "NO_UPFRONT";
  readonly PARTIAL_UPFRONT: "PARTIAL_UPFRONT";
};
export type ReservedInstancePaymentOption =
  (typeof ReservedInstancePaymentOption)[keyof typeof ReservedInstancePaymentOption];
export interface RecurringCharge {
  RecurringChargeAmount?: number | undefined;
  RecurringChargeFrequency?: string | undefined;
}
export interface ReservedInstanceOffering {
  ReservedInstanceOfferingId?: string | undefined;
  InstanceType?: OpenSearchPartitionInstanceType | undefined;
  Duration?: number | undefined;
  FixedPrice?: number | undefined;
  UsagePrice?: number | undefined;
  CurrencyCode?: string | undefined;
  PaymentOption?: ReservedInstancePaymentOption | undefined;
  RecurringCharges?: RecurringCharge[] | undefined;
}
export interface DescribeReservedInstanceOfferingsResponse {
  NextToken?: string | undefined;
  ReservedInstanceOfferings?: ReservedInstanceOffering[] | undefined;
}
export interface DescribeReservedInstancesRequest {
  ReservedInstanceId?: string | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export interface ReservedInstance {
  ReservationName?: string | undefined;
  ReservedInstanceId?: string | undefined;
  BillingSubscriptionId?: number | undefined;
  ReservedInstanceOfferingId?: string | undefined;
  InstanceType?: OpenSearchPartitionInstanceType | undefined;
  StartTime?: Date | undefined;
  Duration?: number | undefined;
  FixedPrice?: number | undefined;
  UsagePrice?: number | undefined;
  CurrencyCode?: string | undefined;
  InstanceCount?: number | undefined;
  State?: string | undefined;
  PaymentOption?: ReservedInstancePaymentOption | undefined;
  RecurringCharges?: RecurringCharge[] | undefined;
}
export interface DescribeReservedInstancesResponse {
  NextToken?: string | undefined;
  ReservedInstances?: ReservedInstance[] | undefined;
}
export interface DescribeVpcEndpointsRequest {
  VpcEndpointIds: string[] | undefined;
}
export declare const VpcEndpointErrorCode: {
  readonly ENDPOINT_NOT_FOUND: "ENDPOINT_NOT_FOUND";
  readonly SERVER_ERROR: "SERVER_ERROR";
};
export type VpcEndpointErrorCode =
  (typeof VpcEndpointErrorCode)[keyof typeof VpcEndpointErrorCode];
export interface VpcEndpointError {
  VpcEndpointId?: string | undefined;
  ErrorCode?: VpcEndpointErrorCode | undefined;
  ErrorMessage?: string | undefined;
}
export interface DescribeVpcEndpointsResponse {
  VpcEndpoints: VpcEndpoint[] | undefined;
  VpcEndpointErrors: VpcEndpointError[] | undefined;
}
export interface DissociatePackageRequest {
  PackageID: string | undefined;
  DomainName: string | undefined;
}
export interface DissociatePackageResponse {
  DomainPackageDetails?: DomainPackageDetails | undefined;
}
export interface DissociatePackagesRequest {
  PackageList: string[] | undefined;
  DomainName: string | undefined;
}
export interface DissociatePackagesResponse {
  DomainPackageDetailsList?: DomainPackageDetails[] | undefined;
}
export interface GetApplicationRequest {
  id: string | undefined;
}
export declare const ApplicationStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type ApplicationStatus =
  (typeof ApplicationStatus)[keyof typeof ApplicationStatus];
export interface GetApplicationResponse {
  id?: string | undefined;
  arn?: string | undefined;
  name?: string | undefined;
  endpoint?: string | undefined;
  status?: ApplicationStatus | undefined;
  iamIdentityCenterOptions?: IamIdentityCenterOptions | undefined;
  dataSources?: DataSource[] | undefined;
  appConfigs?: AppConfig[] | undefined;
  createdAt?: Date | undefined;
  lastUpdatedAt?: Date | undefined;
}
export interface GetCompatibleVersionsRequest {
  DomainName?: string | undefined;
}
export interface CompatibleVersionsMap {
  SourceVersion?: string | undefined;
  TargetVersions?: string[] | undefined;
}
export interface GetCompatibleVersionsResponse {
  CompatibleVersions?: CompatibleVersionsMap[] | undefined;
}
export interface GetDataSourceRequest {
  DomainName: string | undefined;
  Name: string | undefined;
}
export declare const DataSourceStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly DISABLED: "DISABLED";
};
export type DataSourceStatus =
  (typeof DataSourceStatus)[keyof typeof DataSourceStatus];
export interface GetDataSourceResponse {
  DataSourceType?: DataSourceType | undefined;
  Name?: string | undefined;
  Description?: string | undefined;
  Status?: DataSourceStatus | undefined;
}
export interface GetDirectQueryDataSourceRequest {
  DataSourceName: string | undefined;
}
export interface GetDirectQueryDataSourceResponse {
  DataSourceName?: string | undefined;
  DataSourceType?: DirectQueryDataSourceType | undefined;
  Description?: string | undefined;
  OpenSearchArns?: string[] | undefined;
  DataSourceArn?: string | undefined;
}
export interface GetDomainMaintenanceStatusRequest {
  DomainName: string | undefined;
  MaintenanceId: string | undefined;
}
export declare const MaintenanceType: {
  readonly REBOOT_NODE: "REBOOT_NODE";
  readonly RESTART_DASHBOARD: "RESTART_DASHBOARD";
  readonly RESTART_SEARCH_PROCESS: "RESTART_SEARCH_PROCESS";
};
export type MaintenanceType =
  (typeof MaintenanceType)[keyof typeof MaintenanceType];
export declare const MaintenanceStatus: {
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly PENDING: "PENDING";
  readonly TIMED_OUT: "TIMED_OUT";
};
export type MaintenanceStatus =
  (typeof MaintenanceStatus)[keyof typeof MaintenanceStatus];
export interface GetDomainMaintenanceStatusResponse {
  Status?: MaintenanceStatus | undefined;
  StatusMessage?: string | undefined;
  NodeId?: string | undefined;
  Action?: MaintenanceType | undefined;
  CreatedAt?: Date | undefined;
  UpdatedAt?: Date | undefined;
}
export interface GetPackageVersionHistoryRequest {
  PackageID: string | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export interface PackageVersionHistory {
  PackageVersion?: string | undefined;
  CommitMessage?: string | undefined;
  CreatedAt?: Date | undefined;
  PluginProperties?: PluginProperties | undefined;
  PackageConfiguration?: PackageConfiguration | undefined;
}
export interface GetPackageVersionHistoryResponse {
  PackageID?: string | undefined;
  PackageVersionHistoryList?: PackageVersionHistory[] | undefined;
  NextToken?: string | undefined;
}
export interface GetUpgradeHistoryRequest {
  DomainName: string | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export declare const UpgradeStep: {
  readonly PRE_UPGRADE_CHECK: "PRE_UPGRADE_CHECK";
  readonly SNAPSHOT: "SNAPSHOT";
  readonly UPGRADE: "UPGRADE";
};
export type UpgradeStep = (typeof UpgradeStep)[keyof typeof UpgradeStep];
export declare const UpgradeStatus: {
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly SUCCEEDED: "SUCCEEDED";
  readonly SUCCEEDED_WITH_ISSUES: "SUCCEEDED_WITH_ISSUES";
};
export type UpgradeStatus = (typeof UpgradeStatus)[keyof typeof UpgradeStatus];
export interface UpgradeStepItem {
  UpgradeStep?: UpgradeStep | undefined;
  UpgradeStepStatus?: UpgradeStatus | undefined;
  Issues?: string[] | undefined;
  ProgressPercent?: number | undefined;
}
export interface UpgradeHistory {
  UpgradeName?: string | undefined;
  StartTimestamp?: Date | undefined;
  UpgradeStatus?: UpgradeStatus | undefined;
  StepsList?: UpgradeStepItem[] | undefined;
}
export interface GetUpgradeHistoryResponse {
  UpgradeHistories?: UpgradeHistory[] | undefined;
  NextToken?: string | undefined;
}
export interface GetUpgradeStatusRequest {
  DomainName: string | undefined;
}
export interface GetUpgradeStatusResponse {
  UpgradeStep?: UpgradeStep | undefined;
  StepStatus?: UpgradeStatus | undefined;
  UpgradeName?: string | undefined;
}
export interface ListApplicationsRequest {
  nextToken?: string | undefined;
  statuses?: ApplicationStatus[] | undefined;
  maxResults?: number | undefined;
}
export interface ApplicationSummary {
  id?: string | undefined;
  arn?: string | undefined;
  name?: string | undefined;
  endpoint?: string | undefined;
  status?: ApplicationStatus | undefined;
  createdAt?: Date | undefined;
  lastUpdatedAt?: Date | undefined;
}
export interface ListApplicationsResponse {
  ApplicationSummaries?: ApplicationSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListDataSourcesRequest {
  DomainName: string | undefined;
}
export interface DataSourceDetails {
  DataSourceType?: DataSourceType | undefined;
  Name?: string | undefined;
  Description?: string | undefined;
  Status?: DataSourceStatus | undefined;
}
export interface ListDataSourcesResponse {
  DataSources?: DataSourceDetails[] | undefined;
}
export interface ListDirectQueryDataSourcesRequest {
  NextToken?: string | undefined;
}
export interface DirectQueryDataSource {
  DataSourceName?: string | undefined;
  DataSourceType?: DirectQueryDataSourceType | undefined;
  Description?: string | undefined;
  OpenSearchArns?: string[] | undefined;
  DataSourceArn?: string | undefined;
  TagList?: Tag[] | undefined;
}
export interface ListDirectQueryDataSourcesResponse {
  NextToken?: string | undefined;
  DirectQueryDataSources?: DirectQueryDataSource[] | undefined;
}
export interface ListDomainMaintenancesRequest {
  DomainName: string | undefined;
  Action?: MaintenanceType | undefined;
  Status?: MaintenanceStatus | undefined;
  MaxResults?: number | undefined;
  NextToken?: string | undefined;
}
export interface DomainMaintenanceDetails {
  MaintenanceId?: string | undefined;
  DomainName?: string | undefined;
  Action?: MaintenanceType | undefined;
  NodeId?: string | undefined;
  Status?: MaintenanceStatus | undefined;
  StatusMessage?: string | undefined;
  CreatedAt?: Date | undefined;
  UpdatedAt?: Date | undefined;
}
export interface ListDomainMaintenancesResponse {
  DomainMaintenances?: DomainMaintenanceDetails[] | undefined;
  NextToken?: string | undefined;
}
export declare const EngineType: {
  readonly Elasticsearch: "Elasticsearch";
  readonly OpenSearch: "OpenSearch";
};
export type EngineType = (typeof EngineType)[keyof typeof EngineType];
export interface ListDomainNamesRequest {
  EngineType?: EngineType | undefined;
}
export interface DomainInfo {
  DomainName?: string | undefined;
  EngineType?: EngineType | undefined;
}
export declare const MasterUserOptionsFilterSensitiveLog: (
  obj: MasterUserOptions
) => any;
export declare const SAMLOptionsInputFilterSensitiveLog: (
  obj: SAMLOptionsInput
) => any;
export declare const AdvancedSecurityOptionsInputFilterSensitiveLog: (
  obj: AdvancedSecurityOptionsInput
) => any;
export declare const CreateDomainRequestFilterSensitiveLog: (
  obj: CreateDomainRequest
) => any;
